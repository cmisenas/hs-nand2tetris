// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /**************************
     * i = 0 => a-instruction *
     * i vvvvvvvvvvvvvvv      *
     * i = 1 => c-instruction *
     * i xx a cccccc ddd jjj  *
     **************************/

    //////////////////////////
    // Instruction decoding //
    //////////////////////////

    Not(in=instruction[15], out=isAInstruction);

    // Used for j-bits later
    Not(in=zeroOut, out=notZeroOut);
    Not(in=negativeOut, out=notNegativeOut);
    And(a=notZeroOut, b=notNegativeOut, out=positiveOut);
    Or(a=zeroOut, b=positiveOut, out=positiveOrZeroOut);
    Or(a=zeroOut, b=negativeOut, out=negativeOrZeroOut);

    // check d-bits (destination)
    And(a=instruction[15], b=instruction[3], out=loadM, out=writeM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    And(a=instruction[15], b=instruction[5], out=loadA);

    // check c-bits (computation)
    And(a=instruction[15], b=instruction[11], out=zxComp);
    And(a=instruction[15], b=instruction[10], out=nxComp);
    And(a=instruction[15], b=instruction[9], out=zyComp);
    And(a=instruction[15], b=instruction[8], out=nyComp);
    And(a=instruction[15], b=instruction[7], out=fComp);
    And(a=instruction[15], b=instruction[6], out=noComp);

    // load into m
    Mux16(a=aout, b=aluOut, sel=loadM, out=outM);




    ////////////////////////////////
    // Execution of A-instruction //
    ////////////////////////////////

    Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=aRegIn);
    // if A-instruction, load v-bits into A-register
    Or(a=isAInstruction, b=loadA, out=loadAReg);
    ARegister(in=aRegIn, load=loadAReg, out=aout, out[0..14]=addressM);


    // Alternatively
    ////////////////////////////////
    // Execution of C-instruction //
    ////////////////////////////////


    // do computation
    Mux16(a=aout, b=inM, sel=instruction[12], out=aOrM);
    DRegister(in=aluOut, load=loadD, out=dout);
    ALU(x=dout, y=aOrM, zx=zxComp, nx=nxComp, zy=zyComp, ny=nyComp, f=fComp, no=noComp, zr=zeroOut, ng=negativeOut, out=aluOut);




    ////////////////////////////
    // Fetch next computation //
    ////////////////////////////

    DMux8Way(in=true, sel=instruction[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    // Check if b is true (output greater than 0)
    And(a=b, b=positiveOut, out=jgt);
    // Check if c is true (output equal to 0)
    And(a=c, b=zeroOut, out=jeq);
    // Check if d is true (output is greater than or equal to 0)
    And(a=d, b=positiveOrZeroOut, out=jge);
    // Check if e is true (output is less than 0)
    And(a=e, b=negativeOut, out=jlt);
    // Check if f is true (output is not equal to 0)
    And(a=f, b=notZeroOut, out=jne);
    // Check if g is true (output is less than or equal to 0)
    And(a=g, b=negativeOrZeroOut, out=jle);
    Or8Way(in[0]=false, in[1]=jgt, in[2]=jeq, in[3]=jge, in[4]=jlt, in[5]=jne, in[6]=jle, in[7]=h, out=shouldLoad);
    And(a=instruction[15], b=shouldLoad, out=load);
    PC(in=aout, load=load, inc=true, reset=reset, out[0..14]=pc, out[15]=msb2);
}
